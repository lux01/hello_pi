//! A set of traits that wrap a HTTP client
//! library, for consumption by the Discord client.

mod hyper;

pub use url::Url;
use std::error::Error as StdError;
use std::fmt;
use std::io::Read;

use super::AuthorizationToken;


/// The error type used by a HTTP client.
pub trait HttpError: StdError + fmt::Debug { }

/// A HTTP client, that can generate GET requests
/// and read the responses to a `String`.
pub trait HttpClient<'a> {
    /// The error type returned during request sending
    type Error: HttpError;
    /// The client's request builder and sender
    type Request: HttpRequest<'a, Self::Error>;


    /// Generate a new HTTP GET request given a `Url`.
    fn get(&'a self, url: Url) -> Self::Request;
}

/// The different Header types used in the Discord API calls
pub enum HttpHeader {
    /// Authorization header
    Authorization(AuthorizationToken),

    /// Library UserAgent header
    UserAgent(String),
}

/// A trait for building and sending a HTTP request generated by the `HttpClient`.
pub trait HttpRequest<'a, E> {
    /// The response type generated by the HTTP library
    type Response: HttpResponse;

    /// Add a `HttpHeader` to the request
    fn header(self, HttpHeader) -> Self;

    /// Set the body for the request
    fn body(self, header: &'a str) -> Self;

    /// Send the request
    fn send(self) -> Result<Self::Response, E>;
}

/// The HTTP status code returned by a request
pub struct HttpStatus {
    /// The raw status code returned.
    pub code: u16,

    /// A textual string returned explaining the error code.
    pub reason: String,
}

/// The response type from the server generated by the `HttpRequest`.
pub trait HttpResponse: Read {
    /// The status code of the response
    fn status(&self) -> HttpStatus;
}
